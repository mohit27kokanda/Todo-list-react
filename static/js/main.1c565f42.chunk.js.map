{"version":3,"sources":["components/TodoItem.js","components/TodoList.js","components/layout/header.js","components/AddTodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["btnStyle","background","color","border","padding","borderRadius","float","cursor","TodoItem","props","style","backgroundColor","textDecoration","todos","completed","type","onChange","markComplete","id","title","onClick","deleteTodo","TodoList","map","todo","key","header","headerStyle","linkStyle","to","textAlign","AddTodo","useState","inputState","setInputState","onSubmit","event","preventDefault","addTodo","display","name","flex","placeholder","target","value","className","About","Fragment","App","todoState","setTodoState","useEffect","axios","get","then","res","data","delete","filter","post","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1c565f42.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst TodoItem = (props) => {\r\n  const getStyle = () => {\r\n    return {\r\n      backgroundColor: \"#f4f4f4\",\r\n      border: \"2px dotted\",\r\n      padding: \"20px 20px\",\r\n      textDecoration: props.todos.completed ? \"line-through\" : \"none\",\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div style={getStyle()}>\r\n      <p>\r\n        <input\r\n          type=\"checkbox\"\r\n          onChange={() => props.markComplete(props.todos.id)}\r\n        />{\" \"}\r\n        {props.todos.title}\r\n        <button\r\n          style={btnStyle}\r\n          onClick={() => props.deleteTodo(props.todos.id)}>\r\n          x\r\n        </button>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst btnStyle = {\r\n  background: \"#ff0000\",\r\n  color: \"#fff\",\r\n  border: \"none\",\r\n  padding: \"5px 9px\",\r\n  borderRadius: \"50%\",\r\n  float: \"right\",\r\n  cursor: \"pointer\",\r\n};\r\n\r\n//PropTypes\r\nTodoItem.propTypes = {\r\n  todos: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default TodoItem;\r\n","import React from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst TodoList = (props) => {\r\n  return props.todos.map((todo) => {\r\n    return (\r\n      <TodoItem\r\n        key={todo.id}\r\n        todos={todo}\r\n        markComplete={props.markComplete}\r\n        deleteTodo={props.deleteTodo}\r\n      />\r\n    );\r\n  });\r\n};\r\n\r\n//PropTypes\r\nTodoList.propTypes = {\r\n  todos: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default TodoList;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function header() {\r\n  return (\r\n    <header style={headerStyle}>\r\n      <h1>TODO List</h1>\r\n      <Link style={linkStyle} to=\"/\">\r\n        Home\r\n      </Link>{\" \"}\r\n      |{\" \"}\r\n      <Link style={linkStyle} to=\"/about\">\r\n        About\r\n      </Link>\r\n    </header>\r\n  );\r\n}\r\n\r\nconst headerStyle = {\r\n  background: \"#333\",\r\n  color: \"#fff\",\r\n  padding: \"10px\",\r\n  textAlign: \"center\",\r\n};\r\n\r\nconst linkStyle = {\r\n  color: \"white\",\r\n  textDecoration: \"underline\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function AddTodo(props) {\r\n  const [inputState, setInputState] = useState({\r\n    title: \"\",\r\n  });\r\n\r\n  const onChange = (event) => {\r\n    setInputState({\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const onSubmit = (event) => {\r\n    event.preventDefault();\r\n    props.addTodo(inputState.title);\r\n    setInputState({ title: \"\" });\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={onSubmit} style={{ display: \"flex\" }}>\r\n      <input\r\n        type=\"text\"\r\n        name=\"title\"\r\n        style={{ flex: \"9\", padding: \"10px\" }}\r\n        placeholder=\"Add Todo\"\r\n        onChange={onChange}\r\n        value={inputState.title}\r\n      />\r\n      <button className=\"btn\" style={{ flex: \"2\" }}>\r\n        Submit\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function About() {\r\n  return (\r\n    <React.Fragment>\r\n      <h1>About</h1>\r\n      <p>This is the Todo app. I am learning React.</p>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport TodoList from \"./components/TodoList\";\r\nimport Header from \"./components/layout/header\";\r\nimport AddTodo from \"./components/AddTodo\";\r\nimport About from \"./components/pages/About\";\r\n// import { v4 as uuidv4 } from \"uuid\";\r\nimport axios from \"axios\";\r\n\r\nconst App = () => {\r\n  const [todoState, setTodoState] = useState({\r\n    todos: [],\r\n  });\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"https://jsonplaceholder.typicode.com/todos?_limit=10\")\r\n      .then((res) => setTodoState({ todos: res.data }));\r\n  }, []);\r\n\r\n  const markComplete = (id) => {\r\n    setTodoState({\r\n      todos: todoState.todos.map((todo) => {\r\n        if (todo.id === id) {\r\n          todo.completed = !todo.completed;\r\n        }\r\n        return todo;\r\n      }),\r\n    });\r\n  };\r\n\r\n  const deleteTodo = (id) => {\r\n    axios\r\n      .delete(\"https://jsonplaceholder.typicode.com/todos/$(id)\")\r\n      .then((res) =>\r\n        setTodoState({\r\n          todos: todoState.todos.filter((todo) => todo.id !== id),\r\n        })\r\n      );\r\n  };\r\n\r\n  const addTodo = (title) => {\r\n    axios\r\n      .post(\"https://jsonplaceholder.typicode.com/todos\", {\r\n        title: title,\r\n        completed: false,\r\n      })\r\n      .then((res) =>\r\n        setTodoState({\r\n          todos: [...todoState.todos, res.data],\r\n        })\r\n      );\r\n  };\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <div className=\"container\">\r\n          <Route\r\n            exact\r\n            path=\"/\"\r\n            render={(props) => (\r\n              <React.Fragment>\r\n                <Header />\r\n                <AddTodo addTodo={addTodo} />\r\n                <TodoList\r\n                  todos={todoState.todos}\r\n                  markComplete={markComplete}\r\n                  deleteTodo={deleteTodo}\r\n                />\r\n              </React.Fragment>\r\n            )}\r\n          />\r\n          <Route path=\"/about\" component={About} />\r\n        </div>\r\n      </div>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}